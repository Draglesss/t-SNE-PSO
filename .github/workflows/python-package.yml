name: Python Package CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 black isort mypy
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check formatting with black
        run: |
          black --check .
          
      - name: Check import sorting with isort
        run: |
          isort --check --profile black .
          
      - name: Type checking with mypy
        run: |
          mypy --ignore-missing-imports tsne_pso/

  test:
    name: Test on Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          python -m pip install numpy scipy scikit-learn tqdm
          # Install umap-learn only on non-Windows systems due to compatibility
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            python -m pip install umap-learn
          fi
          # Install in development mode
          python -m pip install -e .
        shell: bash
          
      - name: Basic import test
        run: |
          python -c "from tsne_pso import TSNEPSO; print('Import successful')"
          
      - name: Run tests with reduced iterations for CI
        run: |
          # Set environment variable to use shorter iterations in tests
          export TSNE_PSO_TEST_QUICK=1
          pytest -xvs --cov=tsne_pso tests/
        shell: bash
          
      - name: Generate coverage report
        run: |
          pytest --cov=tsne_pso --cov-report=xml tests/
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package with twine
        run: |
          twine check dist/*
          
      - name: Install and test built package
        run: |
          pip install dist/*.whl
          python -c "import tsne_pso; print(f'Successfully installed {tsne_pso.__name__}')"
          
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-package
          path: |
            dist/ 